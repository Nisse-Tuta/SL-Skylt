@page "/counter"
@using System.Text.Json
@using SL_Skylt.Models

<h2>Departures</h2>
<button class="btn btn-secondary" @onclick="FetchDepartures">Refresh Departures</button>

<ul>
    @foreach (var departure in departures)
    {
        if (departure.Line.Transport_mode == "BUS")
        {
            <li>@departure.Line.Id - @departure.Destination - @departure.Display @departure.LateStr()</li>
        }
        else
        {
            <li>@departure.Destination - @departure.Display</li>
        }
    }
</ul>

@code {
    private readonly int siteCode = 9703; 
    private string bussesToInclue = "541:2;518:1;550:1;175:*"; 
    private readonly string siteUrl;
    private Timer timer;
    private List<Departure> departures = new List<Departure>();

    public Counter()
    {
        siteUrl = $"https://transport.integration.sl.se/v1/sites/{siteCode}/departures";
    }

    protected override void OnInitialized()
    {
        timer = new Timer(async state =>
        {
            await FetchDepartures(); 
            await InvokeAsync(StateHasChanged);
        }, null, 0, 10000);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }


    private List<Departure> SortAndClean(List<Departure> departures)
    {
        // Sort by TransportMode 'TRAIN' is first then 'BUS' then by Scheduled time
        List<Departure> result = departures
            .OrderBy(d => d.Line.Transport_mode != "TRAIN")
            .ThenBy(d => d.Line.Transport_mode != "BUS")
            .ThenBy(d => d.Scheduled)
            .Where(d => d.Expected < DateTime.Now.AddMinutes(30) )
            .ToList();

        // split bussestoInclude on ; and select from departures where line.id == 541
        var busLines = bussesToInclue.Split(';').Select(b => b.Split(':')).ToList();
        result = result.Where(d => d.Line.Transport_mode == "TRAIN" || busLines.Any(b => b[0] == d.Line.Id.ToString() && (b[1] == "*" || b[1] == d.Direction_Code.ToString()))).ToList();

       

        return result;
    }

    private async Task FetchDepartures()
    {
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync(siteUrl);
        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadAsStringAsync();
            var departureResponse = JsonSerializer.Deserialize<DeparturesResponse>(data, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            departures = SortAndClean(departureResponse?.Departures);
        }
    }
}
