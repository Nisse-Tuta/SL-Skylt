@page "/"
@using System.Text.Json
@using SL_Skylt.Models

<h2>Barkarby @DateTime.Now.ToShortTimeString()  -  @counter</h2>
@* <button class="btn btn-secondary" @onclick="FetchDepartures">Refresh Departures</button> *@

@* Refresh vid klick på hela skärmen *@
<div @onclick="FetchDepartures" style="height: 100%; width: 100%; position: absolute; top: 0; left: 0; z-index: 1;"></div>

<hr />
<ul style="list-style-type:none; margin-left: 0;">
    @foreach (var departure in departures)
    {
        if (departure.Line.Transport_mode == "TRAIN" && departure.Direction_Code == 1)
        {
            <li><h4>@departure.Destination - @departure.Display</h4></li>
        }
    }
</ul>
<ul style="list-style-type:none; margin-left: 0;">
    @foreach (var departure in departures)
    {
        if (departure.Line.Transport_mode == "TRAIN" && departure.Direction_Code == 2)
        {
            <li><h4>@departure.Destination - @departure.Display</h4></li>
        }
    }
</ul>

<ul style="list-style-type:none; margin-left: 0;">
    @foreach (var departure in departures)
    {
        if (departure.Line.Transport_mode == "BUS")
        {
            <li><h5>@departure.Line.Id - @departure.Destination - @departure.Display @departure.LateStr()</h5></li>
        }
    }
</ul>



@code {
    private readonly int siteCode = 9703;
    private string bussesToInclue = "541:2;518:1;550:1;175:*";
    private readonly string siteUrl;
    private Timer timer;
    private List<Departure> departures = new List<Departure>();
    private int counter = 0;  

    public Home()
    {
        siteUrl = $"https://transport.integration.sl.se/v1/sites/{siteCode}/departures";
    }

    protected override void OnInitialized()
    {
        timer = new Timer(async state =>
        {
            await FetchDepartures();
            await InvokeAsync(StateHasChanged);
        }, null, 0, 10000);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private List<Departure> SortAndClean(List<Departure> departures)
    {
        // Sort by TransportMode 'TRAIN' is first then 'BUS' then by Scheduled time
        List<Departure> result = []; 

        List<Departure> trains = departures
            .Where(d => d.Line.Transport_mode == "TRAIN")
            .OrderByDescending(d => d.Direction_Code)
            .ThenBy(d => d.Scheduled)
            .Where(d => d.Expected < DateTime.Now.AddMinutes(30))
            .ToList();

        List<Departure> buses = departures
            .Where(d => d.Line.Transport_mode == "BUS")
            .OrderBy(d => d.Scheduled)
            .Where(d => d.Expected < DateTime.Now.AddMinutes(30))
            .ToList();


        // split bussestoInclude on ; and select from departures where line.id == 541
        var busLines = bussesToInclue.Split(';').Select(b => b.Split(':')).ToList();
        buses = buses.Where(d => busLines.Any(b => b[0] == d.Line.Id.ToString() && (b[1] == "*" || b[1] == d.Direction_Code.ToString()))).ToList();

        result.AddRange(trains);
        result.AddRange(buses);

        return result;
    }

    private async Task FetchDepartures()
    {
        counter++;
        Console.WriteLine($"Fetching departures {counter}");

        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync(siteUrl);
        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadAsStringAsync();
            var departureResponse = JsonSerializer.Deserialize<DeparturesResponse>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            departures = SortAndClean(departureResponse?.Departures);
        }
    }
}
